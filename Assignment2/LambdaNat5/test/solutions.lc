// You will provide in test/solutions.lc the functions

// is_empty, fib, length, even, reverse (with append), weave

//length completed
//length examples
let rec length = \x. if x = # then 0 else 1 + (length (tl x))
in
length a:b:c:d:e:# //evaluates to 5 because there are 5 elements
;;

let rec length = \x. if x = # then 0 else 1 + (length (tl x))
in
length (a:b):# //evaluates to 1 because (a:b) is technically one element

;;

let rec length = \x. if x = # then 0 else 1 + (length (tl x))
in
length # //evaluates to 0 because there are no elements

;;

let rec length = \x. if x = # then 0 else 1 + (length (tl x))
in
length a:b:c:# //evaluates to 3

;;
//is_empty completed
//is_empty examples

let is_empty = \x. if x = # then 1 else 0
in
is_empty # //evaulates to 1 because the list is empty

;;

let is_empty = \x. if x = # then 1 else 0
in
is_empty a:# //evaluates to 0 because it is not empty. a is an element

;;

let is_empty = \x. if x = # then 1 else 0
in
is_empty a:b:c:# //evaluates to 0 because it is not empty. a,b,c are all elements

;;
//even completed
//even examples

let rec length = \x. if x = # then 0 else 1 + (length (tl x))
in
let rec even = \x. if x = # then 0 else if (length (tl x)) = 1 then 1 else if (length x) = 1 then 0 else 1 - (even (tl x))
in
even 1:2:3:4:# //evaluates to 1 because there are even number elements

;;

let rec length = \x. if x = # then 0 else 1 + (length (tl x))
in
let rec even = \x. if x = # then 0 else if (length (tl x)) = 1 then 1 else if (length x) = 1 then 0 else 1 - (even (tl x))
in
even 1:2:3:# //evaluates to 0 because there are odd number elements

;;

let rec length = \x. if x = # then 0 else 1 + (length (tl x))
in
let rec even = \x. if x = # then 0 else if (length (tl x)) = 1 then 1 else if (length x) = 1 then 0 else 1 - (even (tl x))
in
even # //evaluates to 0 because there are no elements

;;
//fib completed
//fib examples

let rec fib = \x. if x = 0 then 0 else if x =1 then 1 else (fib(x-1) + fib(x-2))
in
fib 5 //evaluates to 5

;;

let rec fib = \x. if x = 0 then 0 else if x =1 then 1 else (fib(x-1) + fib(x-2))
in
fib 0 //evaluates to 0

;;

let rec fib = \x. if x = 0 then 0 else if x =1 then 1 else (fib(x-1) + fib(x-2))
in
fib 1 //evaluates to 1

;;

let rec fib = \x. if x = 0 then 0 else if x =1 then 1 else (fib(x-1) + fib(x-2))
in
fib 3 //evaluates to 2

;;

let rec fib = \x. if x = 0 then 0 else if x =1 then 1 else (fib(x-1) + fib(x-2))
in
fib 6 //evaluates to 8

;;
//append completed
//append example

let rec length = \x. if x = # then 0 else if (tl x) = (hd x) then 1 else (1 + (length (tl x)))
in
let rec append = \x. \y. if x = # then (if (length y) = 1 then (if (tl y) = # then y else y:#) else (hd y) : (append # (tl y)))
else (hd x) : (append (tl x) y)
in
append (a:b:c:#) (d:e:f:#) //evaluates to a:b:c:d:e:f:#

;;
//reverse completed
//reverse example

let rec length = \x. if x = # then 0 else if (tl x) = (hd x) then 1 else (1 + (length (tl x)))
in
let rec append = \x. \y. if x = # then (if (length y) = 1 then (if (tl y) = # then y else y:#) else (hd y) : (append # (tl y)))
else (hd x) : (append (tl x) y)
in
let rec reverse = \x. if x = # then # else append (reverse (tl x)) (hd x)
in
reverse (a:b:c:d:e:#) //evaluates to e:d:c:b:a:#

;;

let rec length = \x. if x = # then 0 else if (tl x) = (hd x) then 1 else (1 + (length (tl x)))
in
let rec append = \x. \y. if x = # then (if (length y) = 1 then (if (tl y) = # then y else y:#) else (hd y) : (append # (tl y)))
else (hd x) : (append (tl x) y)
in
let rec reverse = \x. if x = # then # else append (reverse (tl x)) (hd x)
in
reverse (#) //evaluates to #

;;
//weave completed
//weave examples

let rec weave = \x. \y. if x = #
then if y = # then # else y
else if y = #
then x
else if ((hd x) less_equal (hd y)) = 1 then (hd x) : (weave (tl x) (y)) else (hd y) : (weave (x) (tl y))
in
weave (0:1:4:9:#) (2:3:5:6:7:#) //evaluates to 0:1:2:3:4:5:6:7:9:#

;;

let rec weave = \x. \y. if x = #
then if y = # then # else y
else if y = #
then x
else if ((hd x) less_equal (hd y)) = 1 then (hd x) : (weave (tl x) (y)) else (hd y) : (weave (x) (tl y))
in
weave (0:1:4:9:#) (2:3:#) //evaluates to 0:1:2:3:4:9:#

;;

let rec weave = \x. \y. if x = #
then if y = # then # else y
else if y = #
then x
else if ((hd x) less_equal (hd y)) = 1 then (hd x) : (weave (tl x) (y)) else (hd y) : (weave (x) (tl y))
in
weave (0:1:4:9:#) (#) //evaluates to 0:1:4:9:#

;;

let rec weave = \x. \y. if x = #
then if y = # then # else y
else if y = #
then x
else if ((hd x) less_equal (hd y)) = 1 then (hd x) : (weave (tl x) (y)) else (hd y) : (weave (x) (tl y))
in
weave (#) (#) //evaluates to #

;;

let rec weave = \x. \y. if x = #
then if y = # then # else y
else if y = #
then x
else if ((hd x) less_equal (hd y)) = 1 then (hd x) : (weave (tl x) (y)) else (hd y) : (weave (x) (tl y))
in
weave (5:2:7:#) (9:2:4:#) //evaluates to 5:2:7:9:2:4:#
