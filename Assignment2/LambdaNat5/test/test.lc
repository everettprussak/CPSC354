let f = \x. x + 1 in f 2

;;

let rec fact = \x. if x=0 then 1 else x * (fact (x-1))
in
fact 5

;;

if 1+2*3 = 8-1 then true else false

;;

hd (\x. x)a : b : c

 ;;


hd a

;;

tl a:b:c

;;

tl (a:b):c

;;

hd (a:b):c

;;

hd one:two:#

;;

hd (one:two):#

;;

hd (one:two:#):#

;;

(hd (one:(two:#))):#

;;

(hd one:two:#):#

;;


a:b:(c:(d:e))

;;

(hd (a:b:c):(d:e)):f //correct it does (a:b:c):f

;;

(tl (a:b):c):(tl f:(hd v:y)) //correct it does c:v

;;

3 less_equal 4

;;

5 less_equal 1 //does not work for negative numbers?

;;

((\a. a) 2) less_equal ((\c. c) 5)

;;

(if 3+2 = 5 then 12 else 3) less_equal 9

;;

#

// true and false here are (free) variables that do not have in-built meaning ... a more common way to encode true and false in the absence of a type of Booleans is to use integers 1 and 0 and that is what I recommend as well
