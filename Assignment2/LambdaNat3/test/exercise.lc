// Uncomment any one of the following lines or paste one of the comments in the command line
// Do not run the interpreter without predicting a result first

//(\x.x) a          //echo "(\x.x)a" | stack exec LambdaNat-exe
// \x.x a            //echo "\x.x a" | stack exec LambdaNat-exe
//(\x.\y.x) a b     //echo "(\x.\y.x) a b" | stack exec LambdaNat-exe
// (\x.\y.y) a b     //echo "(\x.\y.y) a b" | stack exec LambdaNat-exe
// (\x.\y.x) a b c   //echo "(\x.\y.x) a b c" | stack exec LambdaNat-exe
// (\x.\y.y) a b c   //echo "(\x.\y.y) a b c" | stack exec LambdaNat-exe
// (\x.\y.x) a (b c) //echo "(\x.\y.x) a (b c)" | stack exec LambdaNat-exe
// (\x.\y.y) a (b c) //echo "(\x.\y.y) a (b c)" | stack exec LambdaNat-exe
// (\x.\y.x) (a b) c //echo "(\x.\y.x) (a b) c" | stack exec LambdaNat-exe
// (\x.\y.y) (a b) c //echo "(\x.\y.y) (a b) c" | stack exec LambdaNat-exe
// (\x.\y.x) (a b c) //echo "(\x.\y.x) (a b c)" | stack exec LambdaNat-exe
// (\x.\y.y) (a b c) //echo "(\x.\y.y) (a b c)" | stack exec LambdaNat-exe
// (\ x . S x) S 0
//(if ((\ x . S x) S 0) = ((\ x . S x) S 0) then "True" else "False")

//if a = b then c else d
//let x = A in B
//let x = x in x
//minus_one ((\ x . S S x) S 0)
//if (let x = A in b) = (let x = A in x) then A else x
//let x = (if a = a then b else c) in x


// make up your own
