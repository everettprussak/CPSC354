:en
merge list1 list2 ;;
list2 := nil ;;
list1 := nil ;;
val list1 = new [] ;;
val list2 = new [] ;;
:load test/sort.lc
merge list1 list2 ;;
list1 := nil ;;
list2 := nil ;;
val list2 = new [] ;;
val list1 = new [] ;;
:load test/sort.lc
merge list1 list2 ;;
list1 := nil ;;
val list2 = new [] ;;
val list1 = new [] ;;
:load test/sort.lc
merge list1 list2 ;;
:env
list1 := nil ;;
list2 := nil ;;
val list2 = new [] ;;
val list1 = new [] ;;
:load test/sort.lc
:env
merge list1 list2 ;;
list2 := nil ;;
list1 := nil ;;
val list2 = new [] ;;
val list1 = new [] ;;
:load test/sort.lc
merge list1 list2 ;;
list2 := nil ;;
list1 := nil ;;
val list2 = new [] ;;
val list1 = new [] ;;
:load test/sort.lc
merge list1 list2 ;;
list2 := nil ;;
list1 := nil ;;
val list2 = new [] ;;
val list1 = new [] ;;
:load test/sort.lc
merge list1 list2 ;;
merge list1 list2 ;
list1 := nil ;;
list2 := nil ;;
val list2 = new [] ;;
val list1 = new [] ;;
:load test/sort.lc
merge list1 list2 ;;
list2 := nil ;;
list1 := nil ;;
val list2 = new [] ;;
val list1 = new [] ;;
:load test/sort.lc
:load test/sort.lc
merge list1 list2 ;;
insert 2 list2 ;;
list2 := nil ;;
list1:= nil ;;
val list1 = new [] ;;
val list2 = new [] ;;
:load test/sort.lc
:load test/sort.lc
merge list1 list2 ;;
print !list1 ;;
print !list1 ;
print !list2 ;;
insert 2 list2 ;;
list2 := nil ;;
list1:= nil ;;
val list2 = new [] ;;
val list1 = new [] ;;
:load test/sort.lc
:load test/sort.lc
:load test/sort.lc
:load test/sort.lc
:load test/sort.lc
:load test/sort.lc
print !a ;;
sort a ;;
a := (cons 3 (cons 1 (cons 4 (cons 2 (cons 5 nil))))) ;;
val a = new [] ;;
print!(sort list) ;;
print !list ;;
:env
list := (cons 4(cons 1(cons 2 nil))) ;;
:env
cons list 2 ;;
:env
cons 1 2 ;;
:env
cons 2 3 ;;
val list = new [] ;;
:load test/sort.lc
:env
(cons !list(cons 3(cons 2 1))) ;;
:env
